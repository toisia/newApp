{"version":3,"sources":["components/Dialogues/Dialogues.module.css","components/Dialogues/DialogueItem/DialogueItem.jsx","components/Dialogues/Message/Message.jsx","components/Dialogues/AddMessageForm/AddMessageForm.jsx","components/Dialogues/Dialogues.jsx","components/Dialogues/DialoguesContainer.jsx"],"names":["module","exports","DialogueItem","props","path","id","className","classes","dialogue","to","name","Message","message","validationSchema","Yup","newMessage","max","required","initialValues","AddMessageFormS","onSubmit","values","onSubmitProps","sendMessage","console","log","setSubmitting","resetForm","formik","htmlFor","type","as","placeholder","disabled","isValid","isSubmitting","Dialogues","state","dialoguesPage","dialogElements","dialogues","map","dialog","messagesElements","messages","dialogueItems","AddMessageForm","compose","connect","dispatch","addMessageActionCreator","withAuthRedirect"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,UAAY,6BAA6B,cAAgB,iCAAiC,OAAS,0BAA0B,SAAW,4BAA4B,SAAW,4BAA4B,QAAU,6B,wGCYxNC,EATM,SAACC,GACpB,IAAIC,EAAO,cAAgBD,EAAME,GACjC,OACE,qBAAKC,UAAWC,IAAQC,SAAxB,SACE,cAAC,IAAD,CAASC,GAAIL,EAAb,SAAoBD,EAAMO,UCIjBC,EARC,SAACR,GACf,OACE,qBAAKG,UAAWC,IAAQK,QAAxB,SACE,cAAC,IAAD,CAASH,GAAG,YAAZ,SAAyBN,EAAMS,a,gBCA5BC,G,OAAmBC,IAAW,CACnCC,WAAWD,MACTE,IAAI,GAAI,iCACRC,SAAS,eAGPC,EAAe,CACnBH,WAAY,IAkFDI,EAtEU,SAAChB,GAKtB,OACE,cAAC,IAAD,CACEe,cAAeA,EACfL,iBAAkBA,EAIlBO,SAAU,SAACC,EAAQC,EAAeC,GAEhCpB,EAAMoB,YAAYF,EAAON,YACzBS,QAAQC,IAAIJ,GACdG,QAAQC,IAAI,eAAgBH,GAE5BA,EAAcI,eAAc,GAC5BJ,EAAcK,aAbhB,SAmBI,SAAAC,GAEE,OADAJ,QAAQC,IAAI,eAAgBG,GAGlC,eAAC,IAAD,WACE,gCACA,uBAAOC,QAAQ,eACf,cAAC,IAAD,CACExB,GAAG,UACHK,KAAK,aACLoB,KAAK,OACLC,GAAG,WACHC,YAAa,uBAEf,cAAC,IAAD,CAAetB,KAAK,kBAIpB,8BACA,wBAAQoB,KAAK,SAASG,UAAWL,EAAOM,SAAWN,EAAOO,aAA1D,mCCsEOC,EA/HG,SAACjC,GACjB,IAAIkC,EAAQlC,EAAMmC,cAEdC,EAAiBF,EAAMG,UAAUC,KAAI,SAACC,GAAD,OACvC,cAAC,EAAD,CAAchC,KAAMgC,EAAOhC,KAAML,GAAIqC,EAAOrC,IAASqC,EAAOrC,OAG1DsC,EAAmBN,EAAMO,SAASH,KAAI,SAAC7B,GAAD,OACxC,cAAC,EAAD,CAASA,QAASA,EAAQA,SAAcA,EAAQP,OAoFlD,OAEE,sBAAKC,UAAWC,IAAQiC,UAAxB,UAEE,qBAAKlC,UAAWC,IAAQsC,cAAxB,SAAwCN,IACxC,qBAAKjC,UAAWC,IAAQqC,SAAxB,SAAmCD,IACnC,8BAEA,cAACG,EAAD,CAAiBvB,YAAapB,EAAMoB,oB,gCCjC1BwB,sBACdC,aAnBoB,SAACX,GACrB,MAAO,CACLC,cAAeD,EAAMC,kBAMA,SAACW,GACxB,MAAO,CACL1B,YAAa,SAACR,GACZkC,EAASC,YAAwBnC,SASrCoC,IAFcJ,CAGdX","file":"static/js/3.c402e940.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogues\":\"Dialogues_dialogues__71aD7\",\"dialogueItems\":\"Dialogues_dialogueItems__3GLLI\",\"active\":\"Dialogues_active__1Remh\",\"dialogue\":\"Dialogues_dialogue__8LLQD\",\"messages\":\"Dialogues_messages__2fArZ\",\"message\":\"Dialogues_message__1xDF9\"};","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport classes from \"./../Dialogues.module.css\";\r\n\r\nconst DialogueItem = (props) => {\r\n  let path = \"/dialogues/\" + props.id;\r\n  return (\r\n    <div className={classes.dialogue}>\r\n      <NavLink to={path}>{props.name}</NavLink>\r\n    </div>\r\n  );\r\n};\r\n \r\nexport default DialogueItem;\r\n// {`${classes.message} ${classes.active}`}\r\n\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport classes from \"./../Dialogues.module.css\";\r\n\r\nconst Message = (props) => {\r\n  return (\r\n    <div className={classes.message}>\r\n      <NavLink to=\"/message/\">{props.message}</NavLink>\r\n    </div>\r\n  );\r\n};\r\n \r\nexport default Message;\r\n// {`${classes.message} ${classes.active}`}\r\n","import React from 'react';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport classes from './AddMessageForm.module.css';\r\n\r\n  \r\n  \r\n   const validationSchema = Yup.object({\r\n    newMessage:Yup.string()\r\n     .max(50, 'Must be 50 characters or less')\r\n     .required(\"Required\"),\r\n    \r\n   }) \r\n  const initialValues= {\r\n    newMessage: '',\r\n            };\r\n\r\n  // const  onSubmit= (values, onSubmitProps, props) => {\r\n  //   alert(values.newMessage)\r\n  //   props.sendMessage(values.newMessage);\r\n  //   console.log(values) \r\n  // console.log(\"submit props\", onSubmitProps)\r\n  \r\n  // onSubmitProps.setSubmitting(false)\r\n  // } \r\n  \r\n const AddMessageFormS = (props) => {\r\n\r\n\r\n\r\n\r\n    return (\r\n      <Formik\r\n        initialValues={initialValues}\r\n        validationSchema={validationSchema}\r\n        \r\n\r\n        \r\n        onSubmit={(values, onSubmitProps, sendMessage) => {\r\n          // alert(values.newMessage)\r\n          props.sendMessage(values.newMessage);\r\n          console.log(values) \r\n        console.log(\"submit props\", onSubmitProps)\r\n        \r\n        onSubmitProps.setSubmitting(false)\r\n        onSubmitProps.resetForm()\r\n        \r\n        }}>\r\n          \r\n        \r\n          {\r\n          formik=> {\r\n            console.log(\"Formik props\", formik)\r\n            return(\r\n\r\n      <Form>\r\n        <div>\r\n        <label htmlFor=\"newMessage\"></label>\r\n        <Field\r\n          id=\"message\"\r\n          name=\"newMessage\"\r\n          type=\"text\"\r\n          as=\"textarea\"\r\n          placeholder={\"Enter your message\"}\r\n                 />\r\n        <ErrorMessage  name=\"newMessage\"/>\r\n         </div>\r\n        \r\n          \r\n        <div>\r\n        <button type=\"submit\" disabled={!formik.isValid || formik.isSubmitting}>Send message</button>\r\n        </div>\r\n       </Form>\r\n        )}}\r\n      </Formik>\r\n    );\r\n  };\r\n  \r\n\r\n\r\n\r\n\r\n \r\n  \r\n//           const Login = (props) => {\r\n//             return <div >\r\n//             <h1>Login</h1>\r\n//             <LoginForm/>\r\n           \r\n            \r\n//             </div>\r\n//             }      \r\n\r\n\r\n\r\n\r\nexport default AddMessageFormS\r\n\r\n","import React from \"react\";\r\nimport classes from \"./Dialogues.module.css\";\r\nimport DialogueItem from \"./DialogueItem/DialogueItem\";\r\nimport Message from \"./Message/Message\";\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { Redirect } from \"react-router-dom\";\r\nimport AddMessageFormS from \"./AddMessageForm/AddMessageForm\"\r\n\r\n\r\n\r\n \r\n\r\nconst Dialogues = (props) => {\r\n  let state = props.dialoguesPage;\r\n \r\n  let dialogElements = state.dialogues.map((dialog) => (\r\n    <DialogueItem name={dialog.name} id={dialog.id} key={dialog.id} />\r\n  ));\r\n\r\n  let messagesElements = state.messages.map((message) => (\r\n    <Message message={message.message} key={message.id} />\r\n  ));\r\n \r\n  // let newMessageElement = React.createRef();\r\n\r\n  // let onSendMessage = () => {\r\n  //   props.sendMessage();\r\n  //   // props.dispatch(addMessageActionCreator());\r\n  // };\r\n  // let addNewMessage =()=>{\r\n\r\n  // }\r\n \r\n  // let onMessageChange = () => {\r\n  //   let text = newMessageElement.current.value;\r\n  //   props.updateNewMessageText(text);\r\n  //   // let action = updateNewMessageTextActionCreator(text);\r\n  // };\r\n\r\n  \r\n//   const validationSchema = Yup.object({\r\n//     newMessage:Yup.string()\r\n//      .max(50, 'Must be 50 characters or less')\r\n//      .required(\"Required\"),\r\n    \r\n//    }) \r\n//   const initialValues= {\r\n//     newMessage: '',\r\n//             };\r\n\r\n//   const  onSubmit= (values, onSubmitProps ) => {\r\n//     // alert(values.newMessage)\r\n//     props.sendMessage(values.newMessage);\r\n//     console.log(values.newMessage) \r\n//   // console.log(\"submit props\", onSubmitProps)\r\n  \r\n//   onSubmitProps.setSubmitting(false)\r\n//   } \r\n  \r\n//  const AddMessageForm = (props) => {\r\n\r\n\r\n\r\n\r\n//     return (\r\n//       <Formik\r\n//         initialValues={initialValues}\r\n//         validationSchema={validationSchema}\r\n//         onSubmit={onSubmit}>\r\n        \r\n//           {\r\n//           formik=> {\r\n//             console.log(\"Formik props\", formik)\r\n//             return(\r\n\r\n//       <Form>\r\n//         <div>\r\n//         <label htmlFor=\"newMessage\"></label>\r\n//         <Field\r\n//           id=\"message\"\r\n//           name=\"newMessage\"\r\n//           type=\"text\"\r\n//           as=\"textarea\"\r\n//           placeholder={\"Enter \"}\r\n//                  />\r\n//         <ErrorMessage  name=\"newMessage\"/>\r\n//          </div>\r\n        \r\n          \r\n//         <div>\r\n//         <button type=\"submit\" disabled={!formik.isValid || formik.isSubmitting}>Send</button>\r\n//         </div>\r\n//        </Form>\r\n//         )}}\r\n//       </Formik>\r\n//     );\r\n//   }; \r\n\r\n\r\n\r\n\r\n\r\n  // if (!props.isAuth) return <Redirect to ={\"/login\"}/>;\r\n\r\n  return (\r\n    \r\n    <div className={classes.dialogues}>\r\n     \r\n      <div className={classes.dialogueItems}>{dialogElements}</div>\r\n      <div className={classes.messages}>{messagesElements}</div>\r\n      <div>\r\n      {/* <AddMessageForm />   */}\r\n      <AddMessageFormS sendMessage={props.sendMessage} />  \r\n\r\n\r\n\r\n\r\n\r\n\r\n        {/* <div>\r\n          <textarea\r\n            onChange={onMessageChange}\r\n            ref={newMessageElement}\r\n            value={props.dialoguesPage.newMessageText}\r\n          />\r\n        </div>\r\n        <div>\r\n          <button onClick={onSendMessage}>Add message</button>\r\n        </div> */}\r\n       \r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n// \r\n\r\n\r\n         \r\n\r\nexport default Dialogues;\r\n// {`${classes.message} ${classes.active}`}\r\n","import React from \"react\";\r\nimport classes from \"./Dialogues.module.css\";\r\nimport Dialogues from \"./Dialogues\";\r\nimport {\r\n  addMessageActionCreator,\r\n  updateNewMessageTextActionCreator,\r\n} from \"../../Redux/dialoguesPageReducer\";\r\nimport { connect } from \"react-redux\";\r\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\nimport { compose } from \"redux\";\r\n// import {\r\n//   addMessageActionCreator,\r\n//   updateNewMessageTextActionCreator,\r\n// } from \"../../Redux/state\";\r\n\r\n\r\n// const DialoguesContainer = (props) => {\r\n//   let state = props.store.getState().dialoguesPage;\r\n\r\n//   let sendMessage = () => {\r\n//     props.store.dispatch(addMessageActionCreator());\r\n//   };\r\n\r\n//   let onMessageChange = (text) => {\r\n//     // let text = newMessageElement.current.value;\r\n//     props.store.dispatch(updateNewMessageTextActionCreator(text));\r\n//   };\r\n// const DialoguesContainer = () => {\r\n//   return (\r\n//      <StoreContext.Consumer>\r\n//     {(store) => {\r\n\r\n//   let state = store.getState().dialoguesPage;\r\n\r\n//   let sendMessage = () => {\r\n//     store.dispatch(addMessageActionCreator());\r\n//   };\r\n\r\n//   let onMessageChange = (text) => {\r\n//     // let text = newMessageElement.current.value;\r\n//     store.dispatch(updateNewMessageTextActionCreator(text));\r\n//   };\r\n//    return <Dialogues\r\n//       updateNewMessageText={onMessageChange}\r\n//       sendMessage={sendMessage}\r\n//       dialoguesPage={store.getState().dialoguesPage}\r\n//       newMessageText={store.getState().dialoguesPage.newMessageText}/>;\r\n\r\n// }}\r\n// </StoreContext.Consumer>\r\n//   )\r\n// };\r\n\r\n\r\n// let AuthRedirectComponent = (props)=>{\r\n//   if (!this.props.isAuth) return <Redirect to ={\"/login\"}/>;\r\n//   return <Dialogues props={...props}/>\r\n// }\r\n\r\n\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    dialoguesPage: state.dialoguesPage,\r\n    // isAuth:state.auth.isAuth,\r\n    // newMessageText:state.dialoguesPage.newMessageText,\r\n  };\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    sendMessage: (newMessage) => {\r\n      dispatch(addMessageActionCreator(newMessage));\r\n    },\r\n    // updateNewMessageText: (text) => {\r\n    //   dispatch(updateNewMessageTextActionCreator(text));\r\n    // },\r\n  };\r\n};\r\n export default compose(\r\n  connect(mapStateToProps,mapDispatchToProps),\r\n  withAuthRedirect \r\n)(Dialogues)\r\n\r\n\r\n// let AuthRedirectComponent = withAuthRedirect (Dialogues);\r\n\r\n\r\n// const DialoguesContainer = connect(\r\n//   mapStateToProps,\r\n//   mapDispatchToProps\r\n// )(AuthRedirectComponent);\r\n\r\n// export default DialoguesContainer;\r\n{\r\n  /* // Dialogues\r\n  //     updateNewMessageText={onMessageChange}\r\n  //     sendMessage={sendMessage}\r\n  //     dialoguesPage={state}\r\n  //     newMessageText={state.newMessageText}\r\n  //     //  ref={newMessageElement}\r\n  //     //  value={props.newMessageText}\r\n  //   /> */\r\n}\r\n\r\n{\r\n  /* // {`${classes.message} ${classes.active}`} */\r\n}\r\n"],"sourceRoot":""}